#!/usr/bin/python

import sys
import os
import glob
from optparse import OptionParser

from com.sixsq.slipstream.CommandBase import CommandBase
from com.sixsq.slipstream.HttpClient import HttpClient   
import com.sixsq.slipstream.util as util
import com.sixsq.slipstream.SlipStreamHttpClient as SlipStreamHttpClient

etree = util.importETree()

class MainProgram(CommandBase):
    '''Uploads a collection of modules (in XML format) to the server.'''
    
    def __init__(self, argv=None):
        self.module = ''
        self.username = None
        self.password = None
        self.cookie = None
        self.endpoint = None
        super(MainProgram, self).__init__(argv)

    def parse(self):
        usage = '''usage: %prog [options]'''

        self.parser.usage = usage
        
        self.parser.add_option('-u','--username', dest='username',
                               help='SlipStream username', metavar='USERNAME',
                               default=os.environ.get('SLIPSTREAM_USERNAME'))
        self.parser.add_option('-p','--password', dest='password',
                               help='SlipStream password', metavar='PASSWORD',
                               default=os.environ.get('SLIPSTREAM_PASSWORD'))

        self.parser.add_option('--endpoint', dest='endpoint',
                               help='SlipStream server endpoint', metavar='URL',
                               default=os.environ.get('SLIPSTREAM_ENDPOINT', 'http://slipstream.sixsq.com'))

        self.options, self.args = self.parser.parse_args()

        self._checkArgs()
        
    def _checkArgs(self):
        if len(self.args) > 0:
            self.usageExitTooManyArguments()

    def _read_file(self, file):
        if not os.path.exists(file):
            self.usageExit("Unknown filename: " + file)
        if not os.path.isfile(file):
            self.usageExit("Input is not a file: " + file)
        return open(file).read()

    def _read_module_as_xml(self, contents):
        try:
            return etree.fromstring(contents)
        except Exception, ex:
            print str(ex)
            if self.verboseLevel:
                raise
            sys.exit(-1)

    def doWork(self):
        client = HttpClient(self.options.username, self.options.password)
        client.verboseLevel = self.verboseLevel

        os.chdir('.')
        for file in glob.glob('*.xml'):
            print 'PROCESSING: ', file

            contents = self._read_file(file)
            dom = self._read_module_as_xml(contents)
            attrs = SlipStreamHttpClient.DomExtractor.getAttributes(dom)

            root_node_name = dom.tag
            if root_node_name == 'list':
                sys.stderr.write('Cannot update root project\n')
                sys.exit(-1)
            if not dom.tag in ('imageModule', 'projectModule', 'deploymentModule'):
                sys.stderr.write('Invalid xml\n')
                sys.exit(-1)

            parts = [attrs['parentUri'], attrs['shortName']]
            uri = '/' + '/'.join([part.strip('/') for part in parts])
        
            url = self.options.endpoint + uri

            client.put(url, contents)

if __name__ == "__main__":
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
        sys.exit(-1)
